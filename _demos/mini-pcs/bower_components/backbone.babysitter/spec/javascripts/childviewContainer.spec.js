describe("childview container",function(){describe("when providing an array of views to the constructor",function(){var e;beforeEach(function(){var t=[new Backbone.View,new Backbone.View,new Backbone.View];e=new Backbone.ChildViewContainer(t)}),it("should add all of the views",function(){expect(e.length).toBe(3)})}),describe("when adding a view that does not have a model to the container",function(){var e,t,n,r;beforeEach(function(){t=new Backbone.View,e=new Backbone.ChildViewContainer,e.add(t),n=e.findByCid(t.cid),r=e.findByIndex(0)}),it("should make the view retrievable by the view's cid",function(){expect(n).toBe(t)}),it("should make the view retrievable by numeric index",function(){expect(r).toBe(t)}),it("should update the size of the chidren",function(){expect(e.length).toBe(1)})}),describe("when adding a view that has a model, to the container",function(){var e,t,n,r;beforeEach(function(){r=new Backbone.Model,t=new Backbone.View({model:r}),e=new Backbone.ChildViewContainer,e.add(t),n=e.findByModel(r)}),it("should make the view retrievable by the model",function(){expect(n).toBe(t)})}),describe("when adding a view with a custom index value",function(){var e,t,n;beforeEach(function(){t=new Backbone.View,e=new Backbone.ChildViewContainer,e.add(t,"custom indexer"),n=e.findByCustom("custom indexer")}),it("should make the view retrievable by the custom indexer",function(){expect(n).toBe(t)})}),describe("when removing a view",function(){var e,t,n,r,i;beforeEach(function(){n=new Backbone.Model,i="custome indexer",t=new Backbone.View({model:n}),e=new Backbone.ChildViewContainer,e.add(t,i),e.remove(t)}),it("should update the size of the chidren",function(){expect(e.length).toBe(0)}),it("should remove the index by model",function(){var t=e.findByModel(n);expect(t).toBeUndefined()}),it("should remove the index by custom",function(){var t=e.findByCustom(i);expect(t).toBeUndefined()}),it("should remove the view from the container",function(){var n=e.findByCid(t.cid);expect(n).toBeUndefined()})}),describe("adding or removing a view",function(){var e,t,n;beforeEach(function(){n=new Backbone.Model,t=new Backbone.View({model:n}),e=new Backbone.ChildViewContainer}),it("should return itself when adding, for chaining methods",function(){expect(e.add(t)).toBe(e)}),it("should return itself when removing, for chaining methods",function(){expect(e.remove(t)).toBe(e)})}),describe("when a container has 2 views in it",function(){describe("and applying a method with parameters",function(){var e,t,n;beforeEach(function(){t=new Backbone.View,t.someFunc=jasmine.createSpy("some func"),n=new Backbone.View,n.someFunc=jasmine.createSpy("some func"),e=new Backbone.ChildViewContainer,e.add(t),e.add(n),e.apply("someFunc",["1","2"])}),it("should call that method on the first view",function(){expect(t.someFunc).toHaveBeenCalledWith("1","2")}),it("should call that method on the second view",function(){expect(n.someFunc).toHaveBeenCalledWith("1","2")})}),describe("and calling a method with parameters",function(){var e,t,n;beforeEach(function(){t=new Backbone.View,t.someFunc=jasmine.createSpy("some func"),n=new Backbone.View,n.someFunc=jasmine.createSpy("some func"),e=new Backbone.ChildViewContainer,e.add(t),e.add(n),e.call("someFunc","1","2")}),it("should call that method on the first view",function(){expect(t.someFunc).toHaveBeenCalledWith("1","2")}),it("should call that method on the second view",function(){expect(n.someFunc).toHaveBeenCalledWith("1","2")})}),describe("and calling a method that doesn't exist on one of the views",function(){var e,t,n;beforeEach(function(){t=new Backbone.View,n=new Backbone.View,n.someFunc=jasmine.createSpy("some func"),e=new Backbone.ChildViewContainer,e.add(t),e.add(n),e.call("someFunc","1","2")}),it("should call that method on the second view",function(){expect(n.someFunc).toHaveBeenCalledWith("1","2")})})}),describe("iterators and collection functions",function(){var e,t,n;beforeEach(function(){n=[],t=new Backbone.View,e=new Backbone.ChildViewContainer,e.add(t),e.each(function(e,t){n.push(e)})}),it("should provide a .each iterator",function(){expect(_.isFunction(e.each)).toBe(!0)}),it("should iterate the views with the .each function",function(){expect(n[0]).toBe(t)})})});